@model DocumentExtractor.Core.Models.ExtractedDocument

@{
    ViewBag.Title = "Document Details";
}

<div class="container">
    <div class="row">
        <div class="col-12">
            <!-- Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="display-5">üìÑ Document Details</h1>
                <div>
                    <a asp-action="Index" class="btn btn-outline-secondary">
                        <i class="bi bi-arrow-left"></i> Back to List
                    </a>
                    <button type="button" class="btn btn-outline-danger" 
                            onclick="deleteDocument('@Model.Id', '@Model.FileName')">
                        <i class="bi bi-trash"></i> Delete
                    </button>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
            {
                <div class="alert alert-danger">
                    <i class="bi bi-exclamation-triangle"></i> @ViewBag.ErrorMessage
                </div>
            }

            <!-- Document Information -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title">
                        <i class="bi bi-info-circle"></i> Document Information
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <table class="table table-borderless">
                                <tr>
                                    <td><strong>üìÑ File Name:</strong></td>
                                    <td>@Model.FileName</td>
                                </tr>
                                <tr>
                                    <td><strong>üìÅ File Path:</strong></td>
                                    <td><code>@Model.FilePath</code></td>
                                </tr>
                                <tr>
                                    <td><strong>üìä Document Type:</strong></td>
                                    <td><span class="badge bg-primary">@Model.DocumentType</span></td>
                                </tr>
                                <tr>
                                    <td><strong>üè¢ Supplier:</strong></td>
                                    <td>@Model.Supplier</td>
                                </tr>
                                <tr>
                                    <td><strong>üìÖ Processed Date:</strong></td>
                                    <td>@Model.ProcessedDate.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                </tr>
                            </table>
                        </div>
                        <div class="col-md-6">
                            <table class="table table-borderless">
                                <tr>
                                    <td><strong>üìà Overall Confidence:</strong></td>
                                    <td>
                                        @{
                                            var confidencePercent = Model.OverallConfidence * 100;
                                            var badgeClass = confidencePercent >= 90 ? "bg-success" : 
                                                           confidencePercent >= 70 ? "bg-warning" : "bg-danger";
                                        }
                                        <span class="badge @badgeClass fs-6">
                                            @confidencePercent.ToString("F1")%
                                        </span>
                                    </td>
                                </tr>
                                <tr>
                                    <td><strong>‚öôÔ∏è Processing Status:</strong></td>
                                    <td>
                                        @{
                                            var statusClass = Model.Status switch
                                            {
                                                ProcessingStatus.Completed => "bg-success",
                                                ProcessingStatus.Processing => "bg-info",
                                                ProcessingStatus.Failed => "bg-danger",
                                                ProcessingStatus.NeedsReview => "bg-warning",
                                                _ => "bg-secondary"
                                            };
                                        }
                                        <span class="badge @statusClass">@Model.Status</span>
                                    </td>
                                </tr>
                                <tr>
                                    <td><strong>‚è±Ô∏è Processing Time:</strong></td>
                                    <td>@Model.ProcessingTimeMs ms</td>
                                </tr>
                                <tr>
                                    <td><strong>üìè File Size:</strong></td>
                                    <td>@(Model.FileSizeBytes / 1024.0 / 1024.0).ToString("F2") MB</td>
                                </tr>
                                <tr>
                                    <td><strong>üî¢ Fields Extracted:</strong></td>
                                    <td><span class="badge bg-info">@Model.Fields.Count</span></td>
                                </tr>
                            </table>
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
                    {
                        <div class="alert alert-danger mt-3">
                            <h6>‚ùå Error Message:</h6>
                            <p class="mb-0">@Model.ErrorMessage</p>
                        </div>
                    }
                </div>
            </div>

            <!-- Extracted Fields -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title">
                        <i class="bi bi-list-ul"></i> Extracted Fields (@Model.Fields.Count)
                    </h5>
                </div>
                <div class="card-body">
                    @if (Model.Fields.Any())
                    {
                        <!-- Fields by Type (if available) -->
                        @if (ViewBag.FieldsByType != null)
                        {
                            @foreach (var fieldTypeGroup in (Dictionary<string, List<ExtractedField>>)ViewBag.FieldsByType)
                            {
                                <h6 class="mt-3 mb-2">
                                    <span class="badge bg-secondary">@fieldTypeGroup.Key</span>
                                    <small class="text-muted">(@fieldTypeGroup.Value.Count fields)</small>
                                </h6>
                                <div class="table-responsive">
                                    <table class="table table-sm table-hover">
                                        <thead>
                                            <tr>
                                                <th>Field Name</th>
                                                <th>Value</th>
                                                <th>Confidence</th>
                                                <th>Source</th>
                                                <th>Verified</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var field in fieldTypeGroup.Value.OrderBy(f => f.FieldName))
                                            {
                                                <tr>
                                                    <td><strong>@field.FieldName</strong></td>
                                                    <td>
                                                        <code>@field.Value</code>
                                                        @if (!string.IsNullOrEmpty(field.OriginalValue) && field.OriginalValue != field.Value)
                                                        {
                                                            <br><small class="text-muted">Original: @field.OriginalValue</small>
                                                        }
                                                    </td>
                                                    <td>
                                                        @{
                                                            var fieldConfidencePercent = field.Confidence * 100;
                                                            var fieldBadgeClass = fieldConfidencePercent >= 90 ? "bg-success" : 
                                                                                 fieldConfidencePercent >= 70 ? "bg-warning text-dark" : "bg-danger";
                                                        }
                                                        <span class="badge @fieldBadgeClass">
                                                            @fieldConfidencePercent.ToString("F1")%
                                                        </span>
                                                    </td>
                                                    <td>
                                                        <span class="badge bg-light text-dark">@field.Source</span>
                                                    </td>
                                                    <td>
                                                        @if (field.IsVerified)
                                                        {
                                                            <i class="bi bi-check-circle-fill text-success"></i>
                                                        }
                                                        else
                                                        {
                                                            <i class="bi bi-circle text-muted"></i>
                                                        }
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                        }
                        else
                        {
                            <!-- All fields in one table -->
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>Field Name</th>
                                            <th>Type</th>
                                            <th>Value</th>
                                            <th>Confidence</th>
                                            <th>Source</th>
                                            <th>Extracted</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var field in Model.Fields.OrderBy(f => f.FieldName))
                                        {
                                            <tr>
                                                <td><strong>@field.FieldName</strong></td>
                                                <td><span class="badge bg-secondary">@field.Type</span></td>
                                                <td><code>@field.Value</code></td>
                                                <td>
                                                    @{
                                                        var fieldConfidencePercent = field.Confidence * 100;
                                                        var fieldBadgeClass = fieldConfidencePercent >= 90 ? "bg-success" : 
                                                                             fieldConfidencePercent >= 70 ? "bg-warning text-dark" : "bg-danger";
                                                    }
                                                    <span class="badge @fieldBadgeClass">
                                                        @fieldConfidencePercent.ToString("F1")%
                                                    </span>
                                                </td>
                                                <td><span class="badge bg-light text-dark">@field.Source</span></td>
                                                <td><small>@field.ExtractedDate.ToString("MM/dd HH:mm")</small></td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="bi bi-inbox display-4 text-muted"></i>
                            <h5 class="mt-3">No Fields Extracted</h5>
                            <p class="text-muted">No data fields were extracted from this document.</p>
                        </div>
                    }
                </div>
            </div>

            <!-- Raw Text (if available) -->
            @if (!string.IsNullOrEmpty(Model.RawText))
            {
                <div class="card">
                    <div class="card-header">
                        <h5 class="card-title">
                            <i class="bi bi-file-text"></i> Extracted Text
                        </h5>
                    </div>
                    <div class="card-body">
                        <pre class="bg-light p-3" style="max-height: 300px; overflow-y: auto;">@Model.RawText</pre>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">üóëÔ∏è Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this document?</p>
                <p><strong id="deleteFileName"></strong></p>
                <p class="text-muted">This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form method="post" asp-action="Delete" style="display: inline;">
                    <input type="hidden" name="id" id="deleteDocumentId">
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function deleteDocument(id, fileName) {
            document.getElementById('deleteDocumentId').value = id;
            document.getElementById('deleteFileName').textContent = fileName;
            new bootstrap.Modal(document.getElementById('deleteModal')).show();
        }
    </script>
}